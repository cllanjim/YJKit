//
//  NSObject+YJSafeKVO.h
//  YJKit
//
//  Created by huang-kun on 16/4/3.
//  Copyright © 2016年 huang-kun. All rights reserved.
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// Same as (NSKeyValueObservingOptionOld | NSKeyValueObservingOptionNew)
FOUNDATION_EXTERN NSKeyValueObservingOptions const YJKeyValueObservingOldToNew;

/// Same as (NSKeyValueObservingOptionInitial | NSKeyValueObservingOptionNew)
FOUNDATION_EXTERN NSKeyValueObservingOptions const YJKeyValueObservingUpToDate;


@interface NSObject (YJSafeKVO)

/**
 *  @brief      Key-Value observing the key path and execute the handler block when observed value changes.
 *  @discussion This method performs as same as observing with options NSKeyValueObservingOptionNew.
 
 The observer will be generated implicitly and it's safe for not removing observer explicitly because eventually observer
 will be removed before receiver gets deallocated. It's vaild to use it multiple times for applying different changes
 block with same key path.
 
 *  @param keyPath  The key path, relative to the array, of the property to observe. This value must not be nil.
 *  @param changes  The block of code will be performed when observed value changes.
 */
- (void)observeKeyPath:(NSString *)keyPath changes:(void(^)(id receiver, id _Nullable newValue))changes;


/**
 *  @brief      Key-Value observing the key path and execute the handler block when observed value changes.
 
 The observer will be generated implicitly and it's safe for not removing observer explicitly because eventually observer
 will be removed before receiver gets deallocated. It's vaild to use it multiple times for applying different changes
 block with same key path.
 
 *  @param keyPath  The key path, relative to the array, of the property to observe. This value must not be nil.
 *  @param options  A combination of the NSKeyValueObservingOptions values that specifies what is included in observation notifications.
 *  @param changes  The block of code will be performed when observed value changes.
 */
- (void)observeKeyPath:(NSString *)keyPath
               options:(NSKeyValueObservingOptions)options
               changes:(void(^)(id receiver, id _Nullable newValue, NSDictionary<NSString *,id> * change))changes;


/**
 *  @brief      Key-Value observing the key path and execute the handler block when observed value changes.
 
 The observer will be generated implicitly and it's safe for not removing observer explicitly because eventually observer
 will be removed before receiver gets deallocated. It's vaild to use it multiple times for applying different changes
 block with same key path.
 
 *  @param keyPath      The key path, relative to the array, of the property to observe. This value must not be nil.
 *  @param options      A combination of the NSKeyValueObservingOptions values that specifies what is included in observation notifications.
 *  @param identifier   The string for identifying the current observing operation.
 *  @param queue        The operation queue to which block should be added.
 *  @param changes      The block of code will be performed when observed value changes.
 */
- (void)observeKeyPath:(NSString *)keyPath
               options:(NSKeyValueObservingOptions)options
            identifier:(nullable NSString *)identifier
                 queue:(nullable NSOperationQueue *)queue
               changes:(void(^)(id receiver, id _Nullable newValue, NSDictionary<NSString *,id> * change))changes;


/**
 *  @brief Stops observing property specified by a given key-path relative to the receiver.
 
 If you don't call this method when finish key value observing. All implicit generated observers will be removed from receiver
 before receiver is deallocated. The internal observers will keep alive as long as receiver is alive. This method is for the
 case when receiver is alive and you've done the obverving job. You can call this to manually remove all observers, then the
 block you've used for key value observing method will be released as well.
 
 *  @note  If you observe the same key path multiple times for different reason, you call -unobserveKeyPath: only once is good.
 *  @note  Calling this method only remove observers which generated by method -observeKeyPath:... provided by YJKit, and not remove
 observers which generated by other APIs if you are using (Whether they are system provided or from other 3rd-party libraries).
 
 *  @param keyPath       The key path, relative to the array, of the property to observe. This value must not be nil.
 */
- (void)unobserveKeyPath:(NSString *)keyPath;


/**
 *  @brief Stops observing property specified by an identifier for given key-path relative to the receiver.
 
 If you don't call this method when finish key value observing. All implicit generated observers will be removed from receiver
 before receiver is deallocated. The internal observers will keep alive as long as receiver is alive. This method is for the
 case when receiver is alive and you've done the obverving job. You can call this to manually remove all observers, then the
 block you've used for key value observing method will be released as well.
 
 *  @note  If you observe the same key path multiple times for different reason, you call -unobserveKeyPath: only once is good.
 *  @note  Calling this method only remove observers which generated by method -observeKeyPath:... provided by YJKit, and not remove
 observers which generated by other APIs if you are using (Whether they are system provided or from other 3rd-party libraries).
 
 *  @param keyPath       The key path, relative to the array, of the property to observe. This value must not be nil.
 *  @param identifier    The string represents the observing operation.
 */
- (void)unobserveKeyPath:(NSString *)keyPath forIdentifier:(NSString *)identifier;


/**
 *  @brief Stops observing all properties relative to the receiver.
 
 If you don't call this method when finish key value observing. All implicit generated observers will be removed from receiver
 before receiver is deallocated. The internal observers will keep alive as long as receiver is alive. This method is for the
 case when receiver is alive and you've done the obverving job. You can call this to manually remove all observers, then the
 block you've used for key value observing method will be released as well.
 
 *  @note  Calling this method only remove observers which generated by method -observeKeyPath:... provided by YJKit, and not remove
 observers which generated by other APIs if you are using (Whether they are system provided or from other 3rd-party libraries).
 */
- (void)unobserveAllKeyPaths;

@end

NS_ASSUME_NONNULL_END
